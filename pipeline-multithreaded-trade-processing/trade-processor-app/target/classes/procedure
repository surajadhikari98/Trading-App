DELIMITER $$

CREATE PROCEDURE insert_journal_and_position (
    IN p_trade_id VARCHAR(50),
    IN p_trade_date VARCHAR(100),
    IN p_account_number VARCHAR(50),
    IN p_cusip VARCHAR(50),
    IN p_direction VARCHAR(50),
    IN p_quantity INT,
    IN p_price DOUBLE,
    IN p_posted_date DATETIME,
    OUT o_trade_id VARCHAR(50) -- Output parameter to return the trade_id
)
BEGIN
    DECLARE v_version INT;

    -- Error handling: rollback transaction in case of failure
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Transaction failed, rolling back all changes.';
    END;

    START TRANSACTION;

    -- Step 1: Insert into journal_entries table
    INSERT INTO journal_entries (
        trade_id, trade_date, account_number, cusip, direction, quantity, price, posted_date
    ) VALUES (
        p_trade_id, p_trade_date, p_account_number, p_cusip, p_direction, p_quantity, p_price, p_posted_date
    );

    -- Step 2: Check if the position already exists
    SELECT version INTO v_version
    FROM positions
    WHERE account_number = p_account_number
    AND cusip = p_cusip;

    -- Step 3: If position exists, perform optimistic locking
    IF v_version IS NOT NULL THEN
        UPDATE positions
        SET
            position = position + p_quantity,
            version = version + 1,
            updated_timestamp = CURRENT_TIMESTAMP
        WHERE
            account_number = p_account_number
            AND cusip = p_cusip
            AND version = v_version; -- Optimistic locking: ensure the version hasn't changed

        -- If the update failed due to version mismatch, rollback
        IF ROW_COUNT() = 0 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Optimistic locking failure: version mismatch.';
        END IF;

    -- Step 4: If position does not exist, insert a new row
    ELSE
        INSERT INTO positions (
            account_number, cusip, position, version, created_timestamp, updated_timestamp
        ) VALUES (
            p_account_number, p_cusip, p_quantity, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
        );
    END IF;

        -- Step 5: Update lookup_status and je_status in trade_payloads table
        UPDATE trade_payloads
        SET
            lookup_status = 'pass',
            je_status = 'posted'
        WHERE
            trade_id = p_trade_id;

        COMMIT;

    -- Set the output trade_id to return
    SET o_trade_id = p_trade_id;

END$$

DELIMITER ;